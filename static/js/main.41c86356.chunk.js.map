{"version":3,"sources":["redux/contacts/contacts-selector.js","redux/contacts/contacts-action.js","Components/Contacts/ContactsStyledComponent.js","Components/Contacts/Contacts.js","Components/ContactForm/ContactFormStyledComponent.js","Components/ContactForm/ContactForm.js","Components/Filter/FilterStyledComponents.js","Components/Filter/Filter.js","Components/App/App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["getContacts","state","contacts","items","getFilter","filter","visibleContacts","allContacts","contact","name","toLowerCase","includes","actions","addContact","createAction","number","type","payload","id","uuidv4","deleteContact","changeFilter","List","styled","ul","ListItem","li","Contacts","useSelector","dispatch","useDispatch","map","onClick","Form","form","FormLabel","label","FormInput","input","FormButton","button","ContactForm","useState","setName","setNumber","handleInput","target","value","onSubmit","e","preventDefault","some","alert","onChange","placeholder","required","FilterContainer","Filter","App","className","length","createReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.41c86356.chunk.js","sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const visibleContacts = state => {\n  const allContacts = getContacts(state);\n  const filter = getFilter(state);\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contact/add', (name, number) => ({\n  type: 'contact/add',\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('contact/delete');\nconst changeFilter = createAction('contact/changeFilter');\n\nconst actions = { addContact, deleteContact, changeFilter };\n\nexport default actions;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-action';\nimport { visibleContacts } from '../../redux/contacts/contacts-selector';\nimport { List, ListItem } from './ContactsStyledComponent';\n\nfunction Contacts() {\n  const contacts = useSelector(visibleContacts);\n  const dispatch = useDispatch();\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <ListItem key={id}>\n            <span>{name}:</span>\n            <span>{number}</span>\n            <button\n              type=\"button\"\n              onClick={() => dispatch(actions.deleteContact(id))}\n            >\n              Delete\n            </button>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n\nexport default Contacts;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  margin: 0 auto;\n`;\n\nexport const FormLabel = styled.label`\n  display: block;\n  font-size: 20px;\n  margin-bottom: 10px;\n`;\n\nexport const FormInput = styled.input`\n  display: block;\n  width: 200px;\n  font-size: 13px;\n  padding: 6px 0 4px 10px;\n  border: 1px solid #ccc;\n  background: #f6f6f6;\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const FormButton = styled.button`\n  width: 90px;\n  height: 28px;\n  border: 1px solid #ccc;\n  background: #fff;\n  color: #666;\n  border-radius: 5px;\n  cursor: pointer;\n\n\n  &:active {\n    margin-top: 1px;\n    margin-bottom: -1px;\n    zoom: 1;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-action';\nimport { getContacts } from '../../redux/contacts/contacts-selector';\nimport {\n  Form,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactFormStyledComponent';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleInput = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const isContactAlready = () =>\n    contacts.some(contact => contact.name === name);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (isContactAlready()) {\n      alert(`${name} is already in contacts!`);\n      return;\n    }\n    dispatch(actions.addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormLabel>\n        Name\n        <FormInput\n          type=\"text\"\n          value={name}\n          name=\"name\"\n          onChange={handleInput}\n          placeholder=\"Name*\"\n          required\n        />\n      </FormLabel>\n      <FormLabel>\n        Number\n        <FormInput\n          type=\"number\"\n          value={number}\n          name=\"number\"\n          onChange={handleInput}\n          placeholder=\"111-11-11*\"\n          required\n        />\n      </FormLabel>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </Form>\n  );\n}\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.label`\n  font-size: 18px;\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-action';\nimport { FilterContainer } from './FilterStyledComponents';\nimport { getFilter } from '../../redux/contacts/contacts-selector';\n\nfunction Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <FilterContainer>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\n      />\n    </FilterContainer>\n  );\n}\n\nexport default Filter;\n","import { useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/contacts-selector';\nimport Contacts from '../Contacts';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\n\nexport default function App() {\n  const contacts = useSelector(getContacts);\n\n  return (\n    <section className=\"section\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {contacts.length > 0 && <Filter />}\n      {contacts.length > 0 && <Contacts />}\n    </section>\n  );\n}\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-action';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) => {\n    return state.filter(({ id }) => id !== payload);\n  },\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contacts from './contacts/contacts-reducer';\nimport storage from 'redux-persist/lib/storage';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contacts),\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './Components/App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}